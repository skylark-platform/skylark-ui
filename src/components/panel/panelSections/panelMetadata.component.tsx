import { useQueryClient } from "@tanstack/react-query";
import { Dispatch, SetStateAction, useMemo, useState } from "react";
import { FiUploadCloud } from "react-icons/fi";

import { Select, SelectOption } from "src/components/inputs/select";
import { SkylarkObjectFieldInput } from "src/components/inputs/skylarkObjectFieldInput";
import {
  IntegrationUploader,
  IntegrationUploaderProvider,
} from "src/components/integrations";
import { refetchPanelQueries } from "src/components/panel/panel.lib";
import { PanelLoading } from "src/components/panel/panelLoading";
import {
  PanelSectionTitle,
  PanelSeparator,
} from "src/components/panel/panelTypography";
import { Skeleton } from "src/components/skeleton";
import { OBJECT_OPTIONS } from "src/constants/skylark";
import { UseSkylarkObjectFormWithAutogeneratedValuesReturn } from "src/hooks/forms/useSkylarkObjectFormWithAutogeneratedValues";
import { useGetIntegrations } from "src/hooks/integrations/useGetIntegrations";
import {
  BuiltInSkylarkObjectType,
  ParsedSkylarkObjectConfig,
  SkylarkObjectMeta,
  SkylarkObjectMetadataField,
  SkylarkObjectType,
  SkylarkSystemField,
} from "src/interfaces/skylark";
import { splitMetadataIntoSystemTranslatableGlobal } from "src/lib/skylark/objects";

import {
  CalculatedImageSize,
  PanelMetadataProperty,
  RenderedImage,
} from "./panelMetadataAdditionalSections";
import { PanelSectionLayout } from "./panelSectionLayout.component";

interface PanelMetadataProps {
  isPage?: boolean;
  isLoading?: boolean;
  uid: string;
  language: string;
  objectType: SkylarkObjectType;
  objectMeta: SkylarkObjectMeta | null;
  metadata: Record<string, SkylarkObjectMetadataField> | null;
  objectFieldConfig?: ParsedSkylarkObjectConfig["fieldConfig"];
  form: UseSkylarkObjectFormWithAutogeneratedValuesReturn;
}

const UploadImageSection = ({
  uid,
  objectType,
  id,
}: {
  uid: string;
  objectType: SkylarkObjectType;
  id: string;
}) => {
  const queryClient = useQueryClient();

  const { data } = useGetIntegrations("image");

  const options =
    data?.enabledIntegrations.map(
      (name): SelectOption<IntegrationUploaderProvider> => ({
        label: name,
        value: name,
      }),
    ) || [];

  const [selected, setSelected] = useState<IntegrationUploaderProvider | null>(
    null,
  );

  const provider = selected || data?.enabledIntegrations?.[0];

  return (
    <>
      <PanelSectionTitle text={"Upload"} id={id} />
      <div className="mb-8">
        {data?.enabledIntegrations && data?.enabledIntegrations.length >= 2 && (
          <Select
            options={options}
            selected={provider}
            onChange={setSelected}
            className="mb-4"
            variant="primary"
            placeholder="Select Provider"
          />
        )}
        {provider && (
          <div>
            <IntegrationUploader
              provider={provider}
              type={"image"}
              opts={{ uid, objectType }}
              buttonProps={{
                variant: "outline",
                children: "Upload",
                Icon: <FiUploadCloud className="text-lg" />,
              }}
              onSuccess={() => {
                setTimeout(() => {
                  void refetchPanelQueries(queryClient);
                }, 10000);
              }}
            />
          </div>
        )}
      </div>
    </>
  );
};

export const PanelMetadata = ({
  uid,
  isPage,
  isLoading,
  metadata,
  objectType,
  objectMeta,
  objectFieldConfig: objectFieldConfigArr,
  form: { register, getValues, control, formState, aiFieldGeneration },
}: PanelMetadataProps) => {
  const {
    systemMetadataFields,
    translatableMetadataFields,
    globalMetadataFields,
  } = useMemo(() => {
    const options = OBJECT_OPTIONS.find(({ objectTypes }) =>
      objectTypes.includes(objectType),
    );

    return objectMeta
      ? splitMetadataIntoSystemTranslatableGlobal(
          objectMeta.fields.map(({ name }) => name),
          objectMeta.operations.update.inputs,
          objectMeta.fieldConfig,
          objectFieldConfigArr,
          options,
        )
      : {
          systemMetadataFields: [],
          translatableMetadataFields: [],
          globalMetadataFields: [],
        };
  }, [objectMeta, objectType, objectFieldConfigArr]);

  const requiredFields = objectMeta?.operations.create.inputs
    .filter(({ isRequired }) => isRequired)
    .map(({ name }) => name);

  const sections = [
    {
      id: "system-metadata",
      title: "System Metadata",
      htmlId: "panel-section-system",
      metadataFields: systemMetadataFields,
    },
    {
      id: "translatable-metadata",
      title: "Translatable Metadata",
      htmlId: "panel-section-translatable",
      metadataFields: translatableMetadataFields,
    },
    {
      id: "global-metadata",
      title: "Global Metadata",
      htmlId: "panel-section-global",
      metadataFields: globalMetadataFields,
    },
  ].filter(({ metadataFields }) => metadataFields.length > 0);

  const uploadSection = {
    id: "image-upload",
    htmlId: "image-upload",
    title: "Upload",
  };

  const sideBarSections = sections.map(({ id, title, htmlId }) => ({
    id,
    title,
    htmlId,
  }));

  return (
    <PanelSectionLayout
      sections={
        objectMeta?.isImage
          ? [uploadSection, ...sideBarSections]
          : sideBarSections
      }
      isPage={isPage}
    >
      {objectMeta?.isImage && (
        <>
          {metadata?.url && (
            <RenderedImage
              src={metadata?.url as string | null}
              alt={metadata?.title as string}
            />
          )}
          <UploadImageSection
            id={uploadSection.id}
            uid={uid}
            objectType={objectType}
          />
        </>
      )}
      <form
        className="h-full"
        data-testid="panel-metadata"
        data-loading={isLoading}
        onSubmit={(e) => e.preventDefault()}
      >
        {sections.map(
          (
            { id, title, metadataFields, htmlId },
            index,
            { length: numSections },
          ) => (
            <div key={id} className="mb-8 md:mb-10">
              <PanelSectionTitle id={htmlId} text={title} />
              {metadataFields.map(({ field, config }) => {
                const fieldConfigFromObject = objectFieldConfigArr?.find(
                  ({ name }) => name === field,
                );

                if (config) {
                  const value = getValues(field);

                  return (
                    <SkylarkObjectFieldInput
                      idPrefix="panel-metadata"
                      isLoading={isLoading}
                      key={field}
                      field={field}
                      config={config}
                      control={control}
                      register={register}
                      value={value}
                      formState={formState}
                      additionalRequiredFields={requiredFields}
                      fieldConfigFromObject={fieldConfigFromObject}
                      aiFieldGeneration={
                        field !== SkylarkSystemField.ExternalID
                          ? aiFieldGeneration
                          : undefined
                      }
                    />
                  );
                }

                return (
                  <PanelMetadataProperty
                    key={field}
                    property={field}
                    value={getValues(field)}
                    isLoading={isLoading}
                  />
                );
              })}
              {index < numSections - 1 && <PanelSeparator />}
            </div>
          ),
        )}

        {objectType === BuiltInSkylarkObjectType.SkylarkImage && (
          <>
            <CalculatedImageSize src={metadata?.url as string | null} />
            <PanelMetadataProperty
              property={"URL"}
              value={metadata?.url}
              isUrl
            />
          </>
        )}
      </form>
      <PanelLoading isLoading={!objectMeta}>
        <Skeleton className="mb-6 h-8 w-64" />
        <Skeleton className="mb-2 h-5 w-48" />
        <Skeleton className="h-20 w-full" />
        <Skeleton className="mb-2 mt-6 h-5 w-48" />
        <Skeleton className="h-20 w-full" />
        <Skeleton className="mb-2 mt-6 h-5 w-48" />
        <Skeleton className="h-20 w-full" />
      </PanelLoading>
    </PanelSectionLayout>
  );
};
