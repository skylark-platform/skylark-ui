import { CgSpinner } from "react-icons/cg";
import { GrMagic } from "react-icons/gr";

import { Button } from "src/components/button";
import {
  InputLabel,
  InputLabelProps,
} from "src/components/inputs/label/label.component";
import { Tooltip } from "src/components/tooltip/tooltip.component";
import { AIFieldGeneration } from "src/hooks/forms/useSkylarkObjectFormWithAutogeneratedValues";

export type SkylarkObjectFieldInputLabelProps = {
  field: string;
  idPrefix: string;
  aiFieldGeneration?: AIFieldGeneration;
} & Omit<InputLabelProps, "text">;

export const createHtmlForId = (prefix: string, field: string) =>
  `${prefix}-skylark-object-field-input-${field}`;

// TODO
// - Disable magic wand when field has value
// - When field has value, tooltip should say this field will taken into account when generating results

const AiTooltip = ({
  hasValues,
  isGeneratingAiSuggestions,
  triggerAiFieldGeneration,
}: {
  hasValues: boolean;
  isGeneratingAiSuggestions: boolean;
  triggerAiFieldGeneration: () => void;
}) => {
  if (isGeneratingAiSuggestions) {
    return (
      <>
        <CgSpinner className="mr-1 animate-spin-fast text-base md:text-lg" />
        <p className="font-normal">Generating AI suggestions</p>
      </>
    );
  }

  if (hasValues) {
    return (
      <div className="flex flex-col max-w-64 items-center">
        <p className="font-normal">
          Click on the wand to populate the field using AI generated values.
        </p>
        <p className="font-normal mt-2">
          Alternatively, modify or add fields and refresh AI results.
        </p>
        <div>
          <Button
            variant="neutral"
            className="mt-2 w-auto"
            onClick={triggerAiFieldGeneration}
          >
            Refresh results
          </Button>
        </div>
      </div>
    );
  }

  return (
    <>
      <p className="font-normal">Populate fields to enable AI suggestions.</p>
    </>
  );
};

export const SkylarkObjectFieldInputLabel = ({
  field,
  idPrefix,
  aiFieldGeneration,
  ...props
}: SkylarkObjectFieldInputLabelProps) => (
  <>
    <InputLabel
      text={field}
      htmlFor={createHtmlForId(idPrefix, field)}
      {...props}
    >
      {aiFieldGeneration && (
        <div className="flex ml-2">
          <Tooltip
            tooltip={
              <AiTooltip
                hasValues={aiFieldGeneration.formHasValues}
                isGeneratingAiSuggestions={
                  aiFieldGeneration.isGeneratingAiSuggestions
                }
                triggerAiFieldGeneration={
                  aiFieldGeneration.generateFieldSuggestions
                }
              />
            }
          >
            <span>
              <Button
                Icon={<GrMagic className="text-base" />}
                disabled={
                  !aiFieldGeneration.formHasValues ||
                  aiFieldGeneration.isGeneratingAiSuggestions
                }
                className=""
                variant="form"
                onClick={() =>
                  aiFieldGeneration.populateFieldUsingAiValue(field)
                }
              />
            </span>
          </Tooltip>
        </div>
      )}
    </InputLabel>
  </>
);
