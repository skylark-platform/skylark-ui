import { useCallback } from "react";
import { UseFormProps, UseFormReturn, useForm } from "react-hook-form";

import { useAIGeneratedFields } from "src/hooks/ai/useAIGeneratedFields";
import { SkylarkObjectMetadataField } from "src/interfaces/skylark";

export interface AIFieldGeneration {
  isGeneratingAiSuggestions: boolean;
  hasAiSuggestions: boolean;
  formHasValues: boolean;
  populateFieldUsingAiValue: (field: string) => void;
  generateFieldSuggestions: () => void;
}

export interface UseSkylarkObjectFormWithAutogeneratedValuesReturn
  extends UseFormReturn<Record<string, SkylarkObjectMetadataField>> {
  aiFieldGeneration: AIFieldGeneration;
  formHasObjectValues: boolean;
}

const formHasObjectPropertyValues = (values: object) => {
  const fieldWithValues = Object.entries(values).filter(
    ([key, value]) => !key.startsWith("_") && value !== "",
  );

  return fieldWithValues.length > 0;
};

export const useSkylarkObjectFormWithAutogeneratedValues = ({
  objectType,
  fieldsToPopulate,
  onFieldsGenerated,
  formProps,
}: {
  objectType: string;
  fieldsToPopulate: string[];
  onFieldsGenerated: () => void;
  formProps?: UseFormProps;
}): UseSkylarkObjectFormWithAutogeneratedValuesReturn => {
  const { setValue, getValues, ...form } =
    useForm<Record<string, SkylarkObjectMetadataField>>(formProps);

  const onFieldsGeneratedWrapper = useCallback(
    (data: unknown, { fieldToFill }: { fieldToFill?: string }) => {
      console.log({ onFieldsGeneratedWrapper: data });
      // if(fieldToFill) {
      //   setValue(fieldToFill, value, { shouldTouch: true, shouldDirty: true });
      // }
      onFieldsGenerated();
    },
    [onFieldsGenerated],
  );

  const {
    generateFieldValues,
    generatedFieldValues,
    getGeneratedFieldValues,
    isGeneratingAiSuggestions,
  } = useAIGeneratedFields({
    onFieldsGenerated: onFieldsGeneratedWrapper,
  });

  console.log({ isGeneratingAiSuggestions });

  const hasAiSuggestions = Boolean(generatedFieldValues);

  const generateFieldValues2 = useCallback(() => {
    generateFieldValues({
      objectType,
      rootFieldData: getValues(),
      fieldsToPopulate,
    });
  }, [fieldsToPopulate, getValues, generateFieldValues, objectType]);

  const populateFieldUsingAiValue = useCallback(
    (field: string) => {
      if (!hasAiSuggestions) {
        generateFieldValues2();
        return;
      }

      const value = getGeneratedFieldValues(field)?.[0];
      if (value !== undefined) {
        setValue(field, value, { shouldTouch: true, shouldDirty: true });
      }
    },
    [hasAiSuggestions, getGeneratedFieldValues, generateFieldValues2, setValue],
  );

  const formHasObjectValues = formHasObjectPropertyValues(getValues());

  const aiFieldGeneration: AIFieldGeneration = {
    populateFieldUsingAiValue,
    isGeneratingAiSuggestions,
    generateFieldSuggestions: generateFieldValues2,
    hasAiSuggestions: Boolean(generatedFieldValues),
    formHasValues: formHasObjectValues,
  };

  return {
    ...form,
    setValue,
    getValues,
    formHasObjectValues,
    aiFieldGeneration,
  };
};
